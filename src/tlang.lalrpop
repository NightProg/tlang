use crate::tree::Expr;
use crate::tree::Literal;
use crate::tree::Op;
use crate::tree::IOp;

grammar;

pub Exprs : Expr = MultiLine<Expr> => Expr::Block {
    body: <>
};
Identifier : Expr = <i:r"[a-zA-Z_][a-zA-Z0-9_]*"> => Expr::Ident{ident: i.to_string()};
Block: Expr = "{" <e:Exprs> "}" => e;
Num : Expr = <n:r"[0-9]+"> => Expr::Literal{value: Literal::Number(n.parse::<f64>().unwrap())} ;
Str : Expr = <s:r#"'(\\.|[^"])*'"#> => Expr::Literal{value: Literal::String(s.to_string())} ;
IfExpr : Expr = "if" <e:Expr> "{" <e1:Exprs>  "}" => Expr::IfThen{cond: Box::new(e), then: Box::new(e1)};
IfElseExpr : Expr = <e1:IfExpr> "else" <e2:Block>  => {
    match e1 {
        Expr::IfThen{cond, then} => Expr::IfThenElse{cond, then, else_: Box::new(e2)},
        _ => panic!("Invalid if-else expression")
    }
};

ForExpr : Expr = "for" <e1:Expr> "in" <e2:Expr> "{" <e3:Exprs> "}" => Expr::For{
    name: Box::new(e1),
    iter: Box::new(e2),
    body: Box::new(e3)
};

WhileExpr : Expr = "while" <e1:Expr> "{" <e2:Exprs> "}" => Expr::While{
    cond: Box::new(e1),
    body: Box::new(e2)
};

LetExpr : Expr = "let" <e1:Identifier> "=" <e2:Expr>  => Expr::Assign{name: match e1 {
    Expr::Ident{ident} => ident,
    _ => panic!("Invalid let expression")
}, value: Box::new(e2)};



Op: Expr = {
    <e1:Value> "+" <e2:Fact> => Expr::BinOp{left: Box::new(e1), op: Op::Add, right: Box::new(e2)},
    <e1:Value> "-" <e2:Fact> => Expr::BinOp{left: Box::new(e1), op: Op::Sub, right: Box::new(e2)},
    Fact
};


Fact: Expr = {
    <e1:Fact> "*" <e2:Value> => Expr::BinOp{left: Box::new(e1), op: Op::Mul, right: Box::new(e2)},
    <e1:Fact> "/" <e2:Value> => Expr::BinOp{left: Box::new(e1), op: Op::Div, right: Box::new(e2)},
    Value
};

CmpOp: Expr = {
    <e1:Value> "==" <e2:Value> => Expr::BinOp{left: Box::new(e1), op: Op::Eq, right: Box::new(e2)},
    <e1:Value> "!=" <e2:Value> => Expr::BinOp{left: Box::new(e1), op: Op::Neq, right: Box::new(e2)},
    <e1:Value> "<" <e2:Value> => Expr::BinOp{left: Box::new(e1), op: Op::Lt, right: Box::new(e2)},
    <e1:Value> "<=" <e2:Value> => Expr::BinOp{left: Box::new(e1), op: Op::Le, right: Box::new(e2)},
    <e1:Value> ">" <e2:Value> => Expr::BinOp{left: Box::new(e1), op: Op::Gt, right: Box::new(e2)},
    <e1:Value> ">=" <e2:Value> => Expr::BinOp{left: Box::new(e1), op: Op::Ge, right: Box::new(e2)}
};
IOp : Expr = {
    <e1:Identifier> "+=" <e2:Expr> => Expr::IOp{name: match e1 {
        Expr::Ident{ident} => ident,
        _ => panic!("Invalid let expression")
    }, op: IOp::IAdd, value: Box::new(e2)},
    <e1:Identifier> "-=" <e2:Expr> => Expr::IOp{name: match e1 {
        Expr::Ident{ident} => ident,
        _ => panic!("Invalid let expression")
    }, op: IOp::ISub, value: Box::new(e2)},
    <e1:Identifier> "*=" <e2:Expr> => Expr::IOp{name: match e1 {
        Expr::Ident{ident} => ident,
        _ => panic!("Invalid let expression")
    }, op: IOp::IMul, value: Box::new(e2)},
    <e1:Identifier> "/=" <e2:Expr> => Expr::IOp{name: match e1 {
        Expr::Ident{ident} => ident,
        _ => panic!("Invalid let expression")
    }, op: IOp::IDiv, value: Box::new(e2)},
}
SetVar: Expr = <e1:Identifier> "=:" <e2:Expr> => Expr::SetVar{name: match e1 {
    Expr::Ident{ident} => ident,
    _ => panic!("Invalid set-var expression")
}, value: Box::new(e2)};

List: Expr = {
    "[" <s:Expr *> <e:("," Expr)*> "]" => {
        let i = s.into_iter();
        let n = e.into_iter().map(|x| x.1);
        Expr::List {
            elems: i.chain(n).collect::<Vec<Expr>>()
        }
    }
};

ArgDef: Vec<Expr> = {
    "(" <s:Identifier*> <e:("," Identifier)*> ")"  => {
        let i = s.into_iter();
        let n = e.into_iter().map(|x| x.1);
        i.chain(n).collect::<Vec<Expr>>()
    }
}; 

ArgCall: Vec<Expr> = {
    "(" <s:Expr*> <e:("," Expr)*> ")"  => {
        let i = s.into_iter();
        let n = e.into_iter().map(|x| x.1);
        i.chain(n).collect::<Vec<Expr>>()
    }
};

FunDef : Expr = "def" <e1:Identifier>  <e2:ArgDef>  "{" <e3:Exprs> "}" => {
    match e1 {
        Expr::Ident{ident} => Expr::FunDef{name: ident, args: e2, body: Box::new(e3) },
        _ => panic!("Invalid function definition")
    }
}; 

True : Expr = "true" => Expr::Literal{value: Literal::Bool(true)};
False : Expr = "false" => Expr::Literal{value: Literal::Bool(false)};

Call : Expr = "@" <e1:Identifier> <e2:ArgCall>  => Expr::Call{name: match e1 {
    Expr::Ident{ident} => ident,
    _ => panic!("Invalid function call")
}, args: e2};

StructFieldDef : Vec<Expr> = {
    <s:Identifier*> <e:(";" Identifier)*>  => {
        let i = s.into_iter();
        let n = e.into_iter().map(|x| x.1);
        i.chain(n).collect::<Vec<Expr>>()
    }
}; 

StructFieldCall : Vec<(Expr, Expr)> = {
    <s:(Identifier "=>" Expr)*> <e:(";" (Identifier "=>" Expr))*>   => {

        let i = s.into_iter().map(|x| (x.0, x.2));
        let n = e.into_iter().map(|x| (x.1.0, x.1.2));
        i.chain(n).collect::<Vec<(Expr, Expr)>>()
    }
};

Struct : Expr = "struct" <e1:Identifier> "{" <e2:StructFieldDef> "}" => Expr::StructDef {name: match e1 {
    Expr::Ident{ident} => ident,
    _ => panic!("Invalid struct")
}, fields: e2};

CallStruct : Expr = "@" <e1:Identifier> "{" <e2:StructFieldCall> "}"  => Expr::CallStruct {name: match e1 {
    Expr::Ident{ident} => ident,
    _ => panic!("Invalid struct call")
}, args: e2};

GetAttr : Expr = <e1:Identifier> "->" <e2:Identifier> => Expr::GetAttr{name: match e1 {
    Expr::Ident{ident} => ident,
    _ => panic!("Invalid get attribute")
}, attr: match e2 {
    Expr::Ident{ident} => ident,
    _ => panic!("Invalid get attribute")
}};

Impl : Expr = "impl" <e1:Identifier> "def" <e2:Identifier> <e3:ArgDef> <e4:Block> => {
    Expr::Impl {
        name_struct: match e1 {
            Expr::Ident{ident} => ident,
            _ => panic!("Invalid impl")
        }, name_method: match e2 {
            Expr::Ident{ident} => ident,
            _ => panic!("Invalid impl")
        }, args: e3, body: Box::new(e4)
    }
};

GetFunc : Expr = <e1:Identifier> "->" "@" <e2:Identifier> <e3:ArgCall> => Expr::GetFunc {
    name: match e1 {
        Expr::Ident{ident} => ident,
        _ => panic!("Invalid get func")
    }, func: match e2 {
        Expr::Ident{ident} => ident,
        _ => panic!("Invalid get func")
    }, args: e3
};

Range : Expr = <e1:Num> ":" <e2:Value> => Expr::Range{start: Box::new(e1), end: Box::new(e2)};

Index : Expr = <e1:Identifier> "." <e2:Value> => Expr::Index{name: Box::new(e1), index: Box::new(e2)};

MatchCase : Vec<(Expr, Expr)> = {
    <s:(Expr "=>" Expr)*> <e:("," (Expr "=>" Expr))*>   => {

        let i = s.into_iter().map(|x| (x.0, x.2));
        let n = e.into_iter().map(|x| (x.1.0, x.1.2));
        i.chain(n).collect::<Vec<(Expr, Expr)>>()
    }
};

Match : Expr = "match" <e1:Expr> "{" <e2:MatchCase> "}" => Expr::Match{value: Box::new(e1), cases: e2};

// UseModule : Expr = "use" <e1:Identifier>;

Value = { 
    Num, 
    Str, 
    Identifier, 
    True, 
    False, 
    Call, 
    Index, 
    List, 
    Range, 
    GetAttr,
    "(" <e:Expr> ")" => e,
};


Expr = {
    Block,
    IfExpr,
    IfElseExpr,
    ForExpr,
    WhileExpr,
    LetExpr,
    Op,
    Struct,
    CallStruct,
    CmpOp,
    FunDef,
    Impl,
    GetFunc,
    SetVar,
    IOp,
    Match,
};



MultiLine<T> : Vec<T> = {
    <v:(<T> "\n") *> <e:T*>  => {
        v.into_iter().chain(e).collect()
    }
};





